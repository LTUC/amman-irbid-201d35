img {
  width: 250px;
  height: 250px;
  margin: 50px;
  object-fit: cover;
  border: 2px solid red;
}

/*transform distorts elements from their original size/shape/position. 'transform' is the property name; it can have different values, like rotate, scale, skew, and translate (like relative positioning, translate moves it to a new place, relative to its old one)*/

/* The rotate() method rotates an element clockwise or counter-clockwise according to a given degree. */

/* #css:hover {
  transform: rotate(-45deg);
  transition: 5s;
}

#html:hover {
  transform: rotate(60deg);
  transition: 5s;
} */

/* 


The scale() method increases or decreases the size of an element (according to the parameters given for the width and height). */

/* #css:hover {
  transform: rotate(35deg) scale(2);
  transition: 5s;
}

#html:hover {
  transform: scale(0.5);
  transition: 5s;
} */

/* method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis). */
/* 
#css:hover {
  transform: translateY(150px);
  transition: 5s;
}

#html:hover {
  transform: translate(-50px, 100px);
  transition: 5s;
} */

/* The skew() method skews an element along the X and Y-axis by the given angles. */
/* 
#css:hover {
  transform: skewX(50deg);
  transition: 5s;
}

#html:hover {
  transform: skew(30deg, 30deg);
  transition: 5s;
} */

/*transitions alter the appearance of an element when the state changes. You use pseudo-selectors to target different states (like :hover :focus :active and :target ).
there are three major properties to set when you use a transition:
- transition-property (which property, or properties, you want to transition)
- transition-duration (how long you the transition to take. this is in seconds, like 2s, or milliseconds, like 350ms)
- transition-timing-function (how does the rate of change happen over the duration of the transition)*/
.rounding {
  width: 200px;
  height: 200px;
  background-color: #0394e6;
  border-radius: 0;
  /* if you want the back to previous take time*/
  transition: 2s;
}
.rounding:hover {
  transition-property: width, border-radius, background-color;
  transition-duration: 5s, 5s, 1s;
  transition-timing-function: linear, linear, linear;
  border-radius: 50%;
  background-color: #f03c1d;
  width: 500px;
}

.doNothing {
  margin: 10px;
  background-color: #a570da;
  opacity: 0.1;
  outline: 5px solid blue;
  transition: 2s;
}

.doNothing:hover {
  transition-property: opacity;
  transition-duration: 100ms;
  transition-timing-function: linear;
  opacity: 1;
  border: 5px solid black;
  transition: border 500ms ease-out;
  transition: 5s;
}

.doNothing:active {
  transition-property: outline;
  transition-duration: 100ms;
  transition-timing-function: linear;
  outline: 7px solid red;
}

/*animations alter an element for a given number of iterations. For animations, you need to define:
- a named animation, using the @keyframes rule, that says where to "start" and where to "end", and (optional) any midpoints in between
- which element is using the named animation (animation-name)
- how long the animation should run (animation-duration)
- how many times to repeat (animation-iteration-count)
- how it should be timed (animation-timing-function)*/

/* The @keyframes rule specifies the animation code.

The animation is created by gradually changing from one set of CSS styles to another.

During the animation, you can change the set of CSS styles many times. */

@keyframes blinkAnimation {
  0% {
    opacity: 1;
    /* color: #000000; */
  }
  50% {
    opacity: 0;
    /* color: #ffffff; */
  }
  100% {
    opacity: 1;
    /* color: #000000; */
  }
}

.blink {
  animation-name: blinkAnimation;
  animation-iteration-count: infinite;
  /* check this for animation
    https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function */
  animation-timing-function: linear;
  animation-duration: 500ms;
}

.animation {
  background-color: #cccccc;
  border: 2px solid red;
  border-radius: 3%;
  width: 400px;
  height: 400px;
  margin-left: 100px;
  position: relative;
}

@keyframes moveRight {
  0% {
    left: 0;
    top: 0;
  }
  25% {
    left: 90%;
    top: 25%;
  }
  50% {
    left: 0%;
    top: 50%;
  }
  75% {
    left: 90%;
    top: 75%;
  }
  100% {
    left: 0%;
    top: 90%;
  }
}

.animationElement {
  animation-duration: 10s;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-name: moveRight;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background-color: #1b5320;
  position: absolute;
}
